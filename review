#!/usr/bin/env bash
set -Eeuo pipefail

# === Paths ===
PROMPT_FILE="$HOME/utils/review-system/prompt_md-output.md"
findnotes="$HOME/utils/review-system/src/find_yesterdays_notes.sh"

VAULT="$HOME/Vault"
REVIEW="${VAULT}/3.\ Review"
YESTERDAY_NOTES="$REVIEW/yesterday_notes"
REVIEWS_DIR="$REVIEW/reviews"

# === Date ===
DATE="$(date -d "yesterday" +"%d-%m-%Y")"

# === Output files ===
YESTERDAY_FILE="$YESTERDAY_NOTES/${DATE}.md"
REVIEW_FILE="$REVIEWS_DIR/${DATE}.md"

YESTERDAY_FILE_TMP="./tmp/yesterday.md"
REVIEW_TMP="./tmp/review.md"

# === Ensure dirs exist ===
mkdir -p "$YESTERDAY_NOTES" "$REVIEWS_DIR" ./tmp

# === Get yesterday's files from your finder script (one path per line) ===
mapfile -t FILES < <("$findnotes" "$VAULT")

if ((${#FILES[@]} == 0)); then
  echo "No notes found for yesterday in: $VAULT"
  exit 0
fi

# === Concatenate notes into a single file (handles spaces safely) ===
{
  echo "# Notes from $DATE"
  echo
  for f in "${FILES[@]}"; do
    [[ -n "$f" ]] || continue
    echo
    echo "----- $(basename "$f") -----"
    echo
    cat "$f"
    echo
  done
} > "$YESTERDAY_FILE_TMP"
# } > "$YESTERDAY_FILE"

echo "✅ Consolidated notes: $YESTERDAY_FILE"

# === Run Gemini (alias -> npx gemini). -p " " forces non-interactive mode. ===
echo "Running LLM..."
npx gemini -p "$(cat ${PROMPT_FILE})${YESTERDAY_FILE_TMP}" > $REVIEW_TMP

mv $YESTERDAY_FILE_TMP $YESTERDAY_FILE
mv $REVIEW_TMP $REVIEW_FILE
rmdir ./tmp

echo "✅ Review generated: $REVIEW_FILE"
