#!/usr/bin/env bash
set -Eeuo pipefail

# === Paths ===
PROMPT_FILE="$HOME/bench/review-system/prompt.txt"
NOTES_DIR="$HOME/Vault"
YESTERDAY_NOTES_DIR="$HOME/review/yesterday_notes"
REVIEWS_DIR="$HOME/review/reviews"

# === Date ===
DATE="$(date -d "yesterday" +"%d-%m-%Y")"

# === Output files ===
YESTERDAY_FILE="$YESTERDAY_NOTES_DIR/${DATE}.md"
REVIEW_FILE="$REVIEWS_DIR/${DATE}.md"

# === Ensure dirs exist ===
mkdir -p "$YESTERDAY_NOTES_DIR" "$REVIEWS_DIR"

# === Get yesterday's files from your finder script (one path per line) ===
mapfile -t FILES < <("$HOME/bench/review-system/src/find_yesterdays_notes.sh" "$NOTES_DIR")

if ((${#FILES[@]} == 0)); then
  echo "No notes found for yesterday in: $NOTES_DIR"
  exit 0
fi

# === Concatenate notes into a single file (handles spaces safely) ===
{
  echo "# Notes from $DATE"
  echo
  for f in "${FILES[@]}"; do
    [[ -n "$f" ]] || continue
    echo
    echo "----- $(basename "$f") -----"
    echo
    cat "$f"
    echo
  done
} > "$YESTERDAY_FILE"

echo "✅ Consolidated notes: $YESTERDAY_FILE"

# === Compose model input: PROMPT first, then the NOTES ===
MODEL_INPUT="$(mktemp)"
{
  cat "$PROMPT_FILE"
  echo
  echo "### NOTES ###"
  cat "$YESTERDAY_FILE"
} > "$MODEL_INPUT"

# === Run Gemini (alias -> npx gemini). -p " " forces non-interactive mode. ===
cat "$MODEL_INPUT" | npx gemini \
  -m gemini-2.5-pro \
  -p " " \
  > "$REVIEW_FILE"

echo "✅ Review generated: $REVIEW_FILE"

